/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2004"),
    table2 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2005"),
    table3 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2006"),
    table4 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2007"),
    table5 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2008"),
    table6 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2009"),
    table7 = ee.FeatureCollection("projects/ee-liuhj946/assets/LS/LS_2010"),
    table8 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2004"),
    table9 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2005"),
    table10 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2006"),
    table11 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2007"),
    table12 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2008"),
    table13 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2009"),
    table14 = ee.FeatureCollection("projects/ee-liuhj946/assets/Area/Area_2010"),
    table15 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2004"),
    table16 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2005"),
    table17 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2006"),
    table18 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2007"),
    table19 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2008"),
    table20 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2009"),
    table21 = ee.FeatureCollection("projects/ee-liuhj946/assets/Hazard/Hazard_2010"),
    table22 = ee.FeatureCollection("projects/ee-liuhj946/assets/Taiwan0410");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var pkgs = require('users/liuhj946/susceptibility:0pkgs');
var Visualization = require('users/liuhj946/susceptibility:8Visualization');
var Hazard = require('users/liuhj946/susceptibility:Hazard');

var LS_columns = ['Slo_mean','Slo_std','Ele_mean','Ele_std','Asp_mean','Asp_std','Nss_mean',
                  'Nss_std','Ess_mean','Ess_std','HCv_mean','HCv_std','VCv_mean','VCv_std',
                  'rain_mean','ndvi_mean','ndvi_std'];
var LA_columns = ['Slo_mean','Slo_std','Ele_mean','Ele_std','Asp_mean','Asp_std','Nss_mean',
                  'Nss_std','Ess_mean','Ess_std','HCv_mean','HCv_std','VCv_mean','VCv_std',
                  'rain_mean','ndvi_mean','ndvi_std','area'];

var yearList = ee.List([2004,2005,2006,2007,2008,2009,2010]);
var grids = pkgs.generateGrid(table22, 2, 2);
//===============================================================================
// 易发性矢量集合
var LS_Tables = {
  'LS_2004':table,
  'LS_2005':table2,
  'LS_2006':table3,
  'LS_2007':table4,
  'LS_2008':table5,
  'LS_2009':table6,
  'LS_2010':table7
};
// 总的易发性矢量结果集合，计算分位数25%/50%/75%/95%
var ls_col = ee.FeatureCollection([table,table2,table3,table4,table5,table6,table7]).flatten();
var susList = [0.25, 0.50, 0.75, 0.95];
var lsQuantile = pkgs.quantile(ls_col, susList, 'LS');
// 易发性分级颜色
var susColors = ee.Dictionary({
    1: {color:'2e7d32'},
    2: {color:'66bb6a'},
    3: {color:'fff176'},
    4: {color:'ffa726'},
    5: {color:'e53935'},
  });
// 根据分位数生成每年的易发性栅格结果集合
var LS_2004 = Visualization.tableVis(table,  'LS', lsQuantile, susColors);
var LS_2005 = Visualization.tableVis(table2, 'LS', lsQuantile, susColors);
var LS_2006 = Visualization.tableVis(table3, 'LS', lsQuantile, susColors);
var LS_2007 = Visualization.tableVis(table4, 'LS', lsQuantile, susColors);
var LS_2008 = Visualization.tableVis(table5, 'LS', lsQuantile, susColors);
var LS_2009 = Visualization.tableVis(table6, 'LS', lsQuantile, susColors);
var LS_2010 = Visualization.tableVis(table7, 'LS', lsQuantile, susColors);
var LS_Images = {
  'LS_2004':LS_2004,
  'LS_2005':LS_2005,
  'LS_2006':LS_2006,
  'LS_2007':LS_2007,
  'LS_2008':LS_2008,
  'LS_2009':LS_2009,
  'LS_2010':LS_2010
};

// 计算易发性每年的混淆矩阵
var matrix2004 = Visualization.tfpnVis(table);
var matrix2005 = Visualization.tfpnVis(table2);
var matrix2006 = Visualization.tfpnVis(table3);
var matrix2007 = Visualization.tfpnVis(table4);
var matrix2008 = Visualization.tfpnVis(table5);
var matrix2009 = Visualization.tfpnVis(table6);
var matrix2010 = Visualization.tfpnVis(table7);
// 易发性每年混淆矩阵结果集合
var matrixImages = {
  'matrix_2004':matrix2004,
  'matrix_2005':matrix2005,
  'matrix_2006':matrix2006,
  'matrix_2007':matrix2007,
  'matrix_2008':matrix2008,
  'matrix_2009':matrix2009,
  'matrix_2010':matrix2010  
};
// 易发性空间交叉验证分块序列
var serial = {
  '1st': 0,
  '2nd': 1,
  '3rd': 2,
  '4th': 3
};
//==============================================================================
// 规模矢量集合
var LA_Tables = {
  'LA_2004':table8,
  'LA_2005':table9,
  'LA_2006':table10,
  'LA_2007':table11,
  'LA_2008':table12,
  'LA_2009':table13,
  'LA_2010':table14
};
// 合并面积结果
var LA_merge = ee.FeatureCollection([table8,table9,table10,table11,table12,table13,table14]).flatten();
// 分位数分级
var areaList = [0.25, 0.50, 0.75, 0.95];
var areaQuantile = pkgs.quantile(LA_merge, areaList, 'LA');
// 面积分级颜色
var areaColors = ee.Dictionary({
    1: {color:'304ffe'},
    2: {color:'00c853'},
    3: {color:'ffff00'},
    4: {color:'ff5252'},
    5: {color:'aa00ff'},
  });
// 根据分位数生成每年的面积栅格结果集合
var LA_2004 = Visualization.tableVis(table8,  'LA', areaQuantile, areaColors);
var LA_2005 = Visualization.tableVis(table9,  'LA', areaQuantile, areaColors);
var LA_2006 = Visualization.tableVis(table10, 'LA', areaQuantile, areaColors);
var LA_2007 = Visualization.tableVis(table11, 'LA', areaQuantile, areaColors);
var LA_2008 = Visualization.tableVis(table12, 'LA', areaQuantile, areaColors);
var LA_2009 = Visualization.tableVis(table13, 'LA', areaQuantile, areaColors);
var LA_2010 = Visualization.tableVis(table14, 'LA', areaQuantile, areaColors);
var LA_Images = {
  'LA_2004':LA_2004,
  'LA_2005':LA_2005,
  'LA_2006':LA_2006,
  'LA_2007':LA_2007,
  'LA_2008':LA_2008,
  'LA_2009':LA_2009,
  'LA_2010':LA_2010
};
//=============================================================================================
// 合并所有年份的危险性
var Hazard_merge = ee.FeatureCollection([table15,table16,table17,table18,table19,table20,table21]).flatten();
// 分位数分级
var hazardList = [0.25, 0.50, 0.75, 0.95];
var hazardQuantile = pkgs.quantile(Hazard_merge, hazardList, 'hazard');
// 危险性等级占比统计
var h2004 = pkgs.statistics(table15, 2004, hazardQuantile);
var h2005 = pkgs.statistics(table16, 2005, hazardQuantile);
var h2006 = pkgs.statistics(table17, 2006, hazardQuantile);
var h2007 = pkgs.statistics(table18, 2007, hazardQuantile);
var h2008 = pkgs.statistics(table19, 2008, hazardQuantile);
var h2009 = pkgs.statistics(table20, 2009, hazardQuantile);
var h2010 = pkgs.statistics(table21, 2010, hazardQuantile);
var hazardclass = ee.FeatureCollection([h2004,h2005,h2006,h2007,h2008,h2009,h2010]).flatten();
// 危险性分级颜色
var hazardColors = ee.Dictionary({
    1: {color:'2e7d32'},
    2: {color:'66bb6a'},
    3: {color:'fff176'},
    4: {color:'ffa726'},
    5: {color:'e53935'},
  });
// 根据分位数生成危险性栅格影像集合
var Hazard_2004 = Visualization.tableVis(table15, 'hazard', hazardQuantile, hazardColors);
var Hazard_2005 = Visualization.tableVis(table16, 'hazard', hazardQuantile, hazardColors);
var Hazard_2006 = Visualization.tableVis(table17, 'hazard', hazardQuantile, hazardColors);
var Hazard_2007 = Visualization.tableVis(table18, 'hazard', hazardQuantile, hazardColors);
var Hazard_2008 = Visualization.tableVis(table19, 'hazard', hazardQuantile, hazardColors);
var Hazard_2009 = Visualization.tableVis(table20, 'hazard', hazardQuantile, hazardColors);
var Hazard_2010 = Visualization.tableVis(table21, 'hazard', hazardQuantile, hazardColors);
var Hazard_Images = {
  'Hazard_2004':Hazard_2004,
  'Hazard_2005':Hazard_2005,
  'Hazard_2006':Hazard_2006,
  'Hazard_2007':Hazard_2007,
  'Hazard_2008':Hazard_2008,
  'Hazard_2009':Hazard_2009,
  'Hazard_2010':Hazard_2010
}
//=============================================================================================
var d2004 = table22.filter(ee.Filter.eq('year',2004));
var d2005 = table22.filter(ee.Filter.eq('year',2005));
var d2006 = table22.filter(ee.Filter.eq('year',2006));
var d2007 = table22.filter(ee.Filter.eq('year',2007));
var d2008 = table22.filter(ee.Filter.eq('year',2008));
var d2009 = table22.filter(ee.Filter.eq('year',2009));
var d2010 = table22.filter(ee.Filter.eq('year',2010));
var scvTables = ee.FeatureCollection([d2004,d2005,d2006,d2007,d2008,d2009,d2010]).flatten();
// 易发性动画影像集合
var animation_col = ee.ImageCollection.fromImages([LS_2004,LS_2005,LS_2006,LS_2007,LS_2008,LS_2009,LS_2010]);
// 易发性/危险性影像可视化参数
var visParam = {min:0,max:1,palette:['2e7d32','66bb6a','fff176','ffa726','e53935']};
// 面积影像可视化参数
var areaParam = {min:0,max:1,palette:['304ffe','00c853','ffff00','ff5252','aa00ff']}
// 危险性影像集合
var hazard_col = ee.ImageCollection.fromImages([Hazard_Images['Hazard_2004'],Hazard_Images['Hazard_2005'],
                    Hazard_Images['Hazard_2006'],Hazard_Images['Hazard_2007'],Hazard_Images['Hazard_2008'],
                    Hazard_Images['Hazard_2009'],Hazard_Images['Hazard_2010']]);
//============================================================================================
var show = function(){
  var leftMap = ui.Map();
  Visualization.LeftMapSelector(LS_Images, matrixImages, LS_Tables, scvTables, LS_columns,
                                grids, serial, leftMap);
  Visualization.LegendLeft(visParam, leftMap);
  Visualization.animation(animation_col,'SUS',yearList,'year',leftMap);
  leftMap.setControlVisibility({zoomControl: false, drawingToolsControl: false});
  
  var rightMap = ui.Map();
  Visualization.LegendRight(areaParam, visParam, rightMap);
  Visualization.hazardChange(hazardclass,rightMap);
  Visualization.correlation(table22, LS_columns, rightMap);
  Visualization.RightMapSelector(LA_Images, LA_Tables, scvTables, LA_columns, grids, serial, Hazard_Images, rightMap);
  Visualization.animation(hazard_col,'HD',yearList,'year',rightMap);
  
  var linker = ui.Map.Linker([leftMap,rightMap]);
  var splitPanel = ui.SplitPanel({
        firstPanel: leftMap,
        secondPanel: rightMap,
        orientation: 'horizontal',
        wipe: true,
      });
  ui.root.widgets().reset([splitPanel]);
  leftMap.centerObject(table22, 10);
}

var first_SU = table22.filter(ee.Filter.eq('year',yearList.get(0)));
Map.addLayer(first_SU, {color: '3a86ff'}, 'slope units');
Map.addLayer(grids, {color: 'f2cc8f'}, 'grids');
Map.centerObject(table22,10);

var button = ui.Button({
  label: 'Run Analysis',
  onClick: function() {
    show();
  },
  style:{backgroundColor :'a8dadc', fontSize:'24px', fontWeight:'bold'}
});
Map.add(button);