var Evaluation = require('users/liuhj946/susceptibility:7Evaluation');
var SCV = require('users/liuhj946/susceptibility:6SCV');
var pkgs = require('users/liuhj946/susceptibility:0pkgs');
var animation = require('users/gena/packages:animation')

//===============================================================================
// 混淆矩阵可视化
exports.tfpnVis = function(LS_table){
  var roc = Evaluation.ROC('LS', LS_table, 'label');
  var visStyles = ee.Dictionary({
    tp:{color:'ef476f'},
    fn:{color:'ffd166'},
    tn:{color:'06d6a0'},
    fp:{color:'118ab2'},
  });
  var Confusionmatrix = Evaluation.Confusionmatrix('LS', LS_table, 'label', roc['ROC_best']);
  var matrix = Confusionmatrix['matrix'];
  matrix = matrix.map(function(feature) {
    return feature.set('style', visStyles.get(feature.get('tfpn')));
  });
  var visImage = matrix.style({
    styleProperty: 'style'
  });
  return visImage;
}

// 分位数法可视化（5类）
exports.tableVis = function(table, column, classList, typeColors){
  var data = table.map(function(feature){
    var value = feature.getNumber(column);
    var type = ee.Algorithms.If({
      condition: value.lte(classList.get(0)),
      trueCase: 1,
      falseCase: ee.Algorithms.If({
        condition: value.lte(classList.get(1)),
        trueCase: 2,
        falseCase: ee.Algorithms.If({
          condition: value.lte(classList.get(2)),
          trueCase: 3,
          falseCase: ee.Algorithms.If({
            condition: value.lte(classList.get(3)),
            trueCase: 4,
            falseCase: 5
          })
        })
      })
    });
    return feature.set('type', type);
  });
  data = data.map(function(feature) {
    return feature.set('style', typeColors.get(feature.get('type')));
  });
  var visImage = data.style({
    styleProperty: 'style'
  });
  return visImage;
}

// 选择框函数
var selector = function(ImagesList,customMap,placeholder, w){
 var res = ui.Select({
    items: Object.keys(ImagesList), 
    onChange: function updateLSMap(selection) {
      var layer = ui.Map.Layer(ImagesList[selection],null,selection);
      var top = customMap.layers().length();
      customMap.layers().set(top, layer);
    }, 
    placeholder:placeholder,
    style: {width: w}
  });
  return res;
}

// 两部件并排函数
var juxtaposition = function(component1, component2, mag){
  var combination = ui.Panel({
    widgets:[component1, component2],
    layout: ui.Panel.Layout.Flow('horizontal'),
    style: {backgroundColor: 'a8dadc',margin: mag}
  });
  return combination;
}

// 标题部件
var title = function(name, color, mag){
  color = color || 'a8dadc';
  mag = mag || '0px 0px';
  var t = ui.Label({
    value: name,
    style: {backgroundColor : color, fontWeight: 'bold', margin: mag, fontSize: '20px'}
  });
  return t;
}

//=================================================================================================================
// 滑坡因子相关性
exports.correlation = function(table, columns, customMap){

  var correlationMatrix = ee.Array(columns.map(function (col1) {
    var row = columns.map(function (col2) {
      var correlation = table.reduceColumns({
        reducer: ee.Reducer.pearsonsCorrelation(),
        selectors: [col1, col2]
      }).get('correlation');
      return correlation;
    });
    return row;
  }));

  var chart = ui.Chart.array.values({array: correlationMatrix, axis:0, xLabels: columns})
                  .setChartType('Table');
  chart.style().set({width: '400px', height: '315px'});
  
  var Panel = ui.Panel({
      widgets: [chart], style: {position: 'top-center', width:'435px', height: '345px', margin: '0 31% 0 0'}
    });
    
  Panel.style().set({shown:false});
  
  var checkBox = ui.Checkbox({
    label: 'Landslide Factor Correlation', 
    onChange: function(check){
      Panel.style().set({
        shown:check
      });
    },
    style: {
      position:'top-left',
      backgroundColor :'a8dadc',
      width: '330px',
      fontSize: '20px',
      margin: '0 0 0 5%'
    }});
  
  customMap.add(checkBox);
  customMap.add(Panel);
}

//=================================================================================================================
// 易发性、混淆矩阵、易发性评价、空间交叉验证评价
exports.LSSelector = function(LS_Images, matrixImages, LS_Tables, scvTable,
                                    columns, grids, serial, customMap) {
  //易发性标题
  var LStitle = title('Landslide Susceptibility Modeling');
  //易发性结果选择框
  var selectLS = selector(LS_Images, customMap, 'Susceptibility Map', '200px');
  //隐藏最上层的易发性结果
  var closeLS = hideTopLayerButton('LS', customMap);
  //将易发性选择框、隐藏按钮并排
  var combination1 = juxtaposition(selectLS, closeLS);
  
  //混淆矩阵标题
  var confusionTitle = title('Confusion Matrix', null);
  //混淆矩阵选择框
  var selectMatrix = selector(matrixImages, customMap, 'Confusion Map', '200px');
  //隐藏最上层的混淆矩阵图层
  var closeMatrix = hideTopLayerButton('Matrix',customMap);
  //混淆矩阵结果、隐藏按钮并排
  var combination2 = juxtaposition(selectMatrix, closeMatrix);
  
  //易发性评价指标
  var susTitle = title('Fitting Performance');
  var susPanel = SUS_ROC_AUC_Index(LS_Tables,customMap);
  
  //空间交叉验证
  var scvTitle = title('Spatial Predictive Performance');
  var scvPanel = SCV_ROC_AUC_Index(scvTable, columns, grids, serial, customMap);
  
  //将上述所有部件组合到一个面板
  var selectPanel = ui.Panel({
    widgets: [LStitle, combination1, confusionTitle, combination2, susTitle, susPanel,
              scvTitle, scvPanel],
    style: {position: 'top-left', backgroundColor :'a8dadc', width: '330px'}
  });
  //添加到地图
  customMap.add(selectPanel);
}

//=================================================================================================================
// 易发性评价指标：Precision, Accuracy, Recall, F1 Score, ROC curve and AUC value
var SUS_ROC_AUC_Index = function(LS_Tables,customMap){
  var select = ui.Select({
    items: Object.keys(LS_Tables),
    onChange:function panel(choice){
      var roc = Evaluation.ROC('LS', LS_Tables[choice], 'label');
      var Confusionmatrix = Evaluation.Confusionmatrix('LS', LS_Tables[choice], 'label', roc['ROC_best']);
      var indexs = Evaluation.Indexs(Confusionmatrix);
      
      var Panel = ui.Panel({style: {width: '300px',position: 'top-center',height:'300px', margin:'0% 41% 0% 0%'}});
      
      var AUC = ee.Number(roc['AUC']).format('%.4f');
      AUC = ee.Number.parse(AUC);
      var Accuracy = ee.Number(indexs['accuracy']).format('%.4f');
      Accuracy = ee.Number.parse(Accuracy);
      var Precision = ee.Number(indexs['precision']).format('%.4f');
      Precision = ee.Number.parse(Precision);
      var Recall = ee.Number(indexs['recall']).format('%.4f');
      Recall = ee.Number.parse(Recall);
      var F1_score = ee.Number(indexs['F1_score']).format('%.4f');
      F1_score = ee.Number.parse(F1_score);
      
      var key = ee.List(['AUC', 'Accuracy', 'Precision', 'Recall', 'F1']);
      var value = ee.Array([AUC, Accuracy, Precision, Recall, F1_score]);
      var chart = ui.Chart.array.values({array: value, axis: 0, xLabels: key})
                .setChartType('ColumnChart')
                .setOptions({
                  title: 'Evaluation of SUS',
                  colors: ['8ecae6'],
                  legend: {position: 'none'},
                  style:{fontSize: 20, bold: true},
                  vAxis: {
                    title: 'Value',
                    titleTextStyle: {italic: false, bold: true, fontSize: 10},
                    viewWindow: {min: 0.5, max: 1},
                  }
                });
      
      var rocPanel = ui.Panel(roc['chartROC']);
      
      var chart2 = ui.Chart.feature.histogram(LS_Tables[choice], 'LS',64)
                            .setOptions({
                              title:'Histogram',
                              hAxis: {  // x-axis
                                title: 'Susceptibility',
                                viewWindow: {min: 0, max: 1}
                              },
                              vAxis: {  // x-axis
                                title: 'Frequency'
                              },
                              trendlines: {
                                0: {  // add a trend line to the 1st series
                                  type: 'polynomial',  // 'liner'or 'polynomial', 'exponential'
                                  color: 'ffbe0b',
                                  degree: 4,
                                  lineWidth: 2,
                                  opacity: 1,
                                  visibleInLegend: true,
                                }
                              }
                            });
      
      var hideButton = ui.Button({
        style:{position: 'bottom-center',stretch:'horizontal'},
        label: 'Close',
        onClick: function(){
          Panel.style().set({
            shown: false
          });
          return;
        }
      });
      var t = title('Fitting Performance', 'ffffff');
      Panel.add(t).add(chart).add(chart2).add(rocPanel).add(hideButton);
      customMap.add(Panel);
    },
    placeholder:'Susceptibility Map',
    style:{width: '200px', margin:'2% 0% 2% 1%'}
  });
  return select;
}

//=================================================================================================================
// 易发性空间交叉验证评价指标：ROC, AUC, Accuracy, Percision, Recall, F1_sorce
var SCV_ROC_AUC_Index = function(table, columns, grids, serial, customMap){
  
  var select = ui.Select({
    items: Object.keys(serial),
    onChange:function panel(choice){
      var scv_res = SCV.SCV(table, columns, 'label', 'id', grids, serial[choice]);
      var roc = Evaluation.ROC('LS', scv_res['scv'], 'label');

      var Confusionmatrix = Evaluation.Confusionmatrix('LS', scv_res['scv'], 'label', roc['ROC_best']);
      var indexs = Evaluation.Indexs(Confusionmatrix);
      
      var explain = scv_res['explain'];
      var importance = ee.Dictionary(explain.get('importance'));
      var ikeys = importance.keys();
      var ivalue = importance.values();
      var ichart = ui.Chart.array.values({array: ivalue, axis:0, xLabels:ikeys})
                    .setChartType('PieChart')
                    .setOptions({
                      title: 'The Importance of Factors',
                      legend: {position:'right'},
                      is3D: true,
                    });
      
      var Panel = ui.Panel({style: {width: '300px',position: 'top-center',height:'300px', margin:'0% 41% 0% 0%'}});
      
      var AUC = ee.Number(roc['AUC']).format('%.4f');
      AUC = ee.Number.parse(AUC);
      var Accuracy = ee.Number(indexs['accuracy']).format('%.4f');
      Accuracy = ee.Number.parse(Accuracy);
      var Precision = ee.Number(indexs['precision']).format('%.4f');
      Precision = ee.Number.parse(Precision);
      var Recall = ee.Number(indexs['recall']).format('%.4f');
      Recall = ee.Number.parse(Recall);
      var F1_score = ee.Number(indexs['F1_score']).format('%.4f');
      F1_score = ee.Number.parse(F1_score);
      
      var key = ee.List(['AUC', 'Accuracy', 'Precision', 'Recall', 'F1']);
      var value = ee.Array([AUC, Accuracy, Precision, Recall, F1_score]);
      var chart = ui.Chart.array.values({array: value, axis: 0, xLabels: key})
                .setChartType('ColumnChart')
                .setOptions({
                  title: 'Evaluation of SCV',
                  colors: ['8ecae6'],
                  legend: {position: 'none'},
                  style:{fontSize: 20, bold: true},
                  vAxis: {
                    title: 'Value',
                    titleTextStyle: {italic: false, bold: true, fontSize: 10},
                    viewWindow: {min: 0, max: 1.0}
                  }
                });
      
      var rocPanel = ui.Panel(roc['chartROC']);
      
      var hideButton = ui.Button({
        style:{position: 'bottom-center',stretch:'horizontal'},
        label: 'Close',
        onClick: function(){
          Panel.style().set({
            shown: false
          });
          return;
        }
      });
      var t = title('Spatial Prediction Preformance', 'ffffff');
      Panel.add(t).add(chart).add(rocPanel).add(ichart).add(hideButton);
      customMap.add(Panel);
    },
    placeholder:'Zone of SCV',
    style: {width: '200px', margin:'2% 0% 2% 1%'}
  });
  return select;
}

//=================================================================================================================
// 易发性、混淆矩阵图例
exports.LegendLeft = function(LSvisParams, customMap) {
  //图例面板
  var legend = ui.Panel({ style: {width: '250px', position: 'bottom-left'}});
  //易发性图例
  var LS_title = title('Landslide Susceptibility', 'ffffff', '0% 0% 0% 3%')
  //生成渐变色条
  var lon = ee.Image.pixelLonLat().select('longitude');
  var gradient = lon.multiply(1/100.0);
  var legendImage = gradient.visualize(LSvisParams);
  var colorBar = ui.Thumbnail({
    image: legendImage,
    params: {bbox:'0,0,100,10', dimensions:'220x15'},
    style: {margin:'0 0 0 3%'}
  });
  //图例最小、最大值
  var txtPanel = ui.Panel({
    widgets: [ui.Label('0'), ui.Label({style: {stretch: 'horizontal'}}),ui.Label('1')],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal', maxWidth:'250px',height:'25px'}
  });
  
  //混淆矩阵图例
  var matrixTilte = title('Confusion Matrix', 'ffffff', '3% 0 0 12%');
  var makeRowa = function(color, name) {
    //生成矩形填充框
    var colorBox = ui.Label({style: {backgroundColor: '#' + color, padding: '15px', margin: '0 0 4px 0' }});
    //生成描述文本
    var description = ui.Label({value: name, style: {margin: '5px 10px 0px 10px', fontSize: '15px'}});
    //合并填充框和文本
    return ui.Panel({widgets: [colorBox, description],layout: ui.Panel.Layout.Flow('horizontal')});
  };
  
  var matrixPalette = ['ef476f','ffd166','118ab2','06d6a0'];
  var matrixName = ['TP','FN','FP','TN'];
  
  var matrixPanel1 = ui.Panel({
    widgets:[makeRowa(matrixPalette[0],matrixName[0]), makeRowa(matrixPalette[1],matrixName[1])],
    style:{margin: '10px 20px 0px 35px'},
    layout: ui.Panel.Layout.Flow('horizontal')
  });
  var matrixPanel2 = ui.Panel({
    widgets:[makeRowa(matrixPalette[2],matrixName[2]), makeRowa(matrixPalette[3],matrixName[3])],
    style:{margin: '10px 20px 0px 35px'},
    layout: ui.Panel.Layout.Flow('horizontal')
  });
  
  var matrixPanel = ui.Panel({
    widgets:[matrixPanel1, matrixPanel2], 
    layout: ui.Panel.Layout.Flow('vertical'),
    style: {margin: '0% 5%'}
  });
  //合并到面板
  legend.add(LS_title).add(txtPanel).add(colorBar).add(matrixTilte).add(matrixPanel);
  customMap.add(legend);
}

//=================================================================================================================
// 每年滑坡危险性等级占比统计
exports.hazardChange = function(hazardclass, customMap){
  var xPropValDict = {
    'area2004':2004,
    'area2005':2005,
    'area2006':2006,
    'area2007':2007,
    'area2008':2008,
    'area2009':2009,
    'area2010':2010
  };
  var xPropLabels = [
    {f:'2004',v:2004},
    {f:'2005',v:2005},
    {f:'2006',v:2006},
    {f:'2007',v:2007},
    {f:'2008',v:2008},
    {f:'2009',v:2009},
    {f:'2010',v:2010}
  ];  

  var chart = ui.Chart.feature
                  .byProperty({
                    features: hazardclass,
                    xProperties: xPropValDict,
                    seriesProperty: 'class'
                  })
                  .setSeriesNames([
                    'very low', 'low', 'medium', 'high', 'very high'
                    ])
                  .setChartType('BarChart')
                  .setOptions({
                    title: 'Proportion of Hazard Classes',
                    hAxis: {
                      title: 'Area Percentage',
                      titleTextStyle: {italic: false, bold: true},
                      gridlines: {count: 0}
                    },
                    vAxis: {
                      title: 'year',
                      titleTextStyle: {italic: false, bold: true},
                      ticks: xPropLabels
                    },
                    colors: ['2e7d32', '66bb6a', 'fff176', 'ffa726', 'e53935'],
                    isStacked: 'percent',
                    series: {
                      5: {visibleInLegend: false}, 6: {visibleInLegend: false}, 7: {visibleInLegend: false}, 
                      8: {visibleInLegend: false}, 9: {visibleInLegend: false}, 10: {visibleInLegend: false}, 
                      11: {visibleInLegend: false}, 12: {visibleInLegend: false}, 13: {visibleInLegend: false}, 
                      14: {visibleInLegend: false}, 15: {visibleInLegend: false}, 16: {visibleInLegend: false}, 
                      17: {visibleInLegend: false}, 18: {visibleInLegend: false}, 19: {visibleInLegend: false}, 
                      20: {visibleInLegend: false}, 21: {visibleInLegend: false}, 22: {visibleInLegend: false}, 
                      23: {visibleInLegend: false}, 24: {visibleInLegend: false}, 25: {visibleInLegend: false}, 
                      26: {visibleInLegend: false}, 27: {visibleInLegend: false}, 28: {visibleInLegend: false}, 
                      29: {visibleInLegend: false}, 30: {visibleInLegend: false}, 31: {visibleInLegend: false}, 
                      32: {visibleInLegend: false}, 33: {visibleInLegend: false}, 34: {visibleInLegend: false}
                    }
                  });
  // chart.style().set({width:'400px', height:'300px'});
                  
  var Panel = ui.Panel({
    widgets: [chart],style: {position: 'top-center', width:'350px', height:'220px', margin: '0 0 0 38%'}
  });  
    
  Panel.style().set({shown:false});
  
  var checkBox = ui.Checkbox({
    label: 'Landslide Hazard Map Statistics', 
    onChange: function(check){
      Panel.style().set({
        shown:check
      });
    },
    style: {
      position:'top-right',
      backgroundColor :'a8dadc',
      width: '330px',
      fontSize: '20px'
    }});
    
  customMap.add(checkBox);
  customMap.add(Panel);
}

//=================================================================================================================
// 滑坡规模预测、评价、空间交叉验证
exports.LAMapSelector = function(LA_Images, LA_Tables, areaSCVTables, LA_columns, grids, serial, customMap){
  //滑坡规模标题
  var areaTitle = title('Landslide Area Modeling');
  //规模预测选择框
  var selectArea = selector(LA_Images, customMap, 'Area Map Prediction', '200px');
  //隐藏最上层的规模结果
  var closeLA = hideTopLayerButton('LA',customMap);
  //并排规模预测和隐藏按钮
  var combination1 = juxtaposition(selectArea, closeLA);
  
  //规模预测评价指标
  var assessmentTitle = title('Fitting Performance');
  var assessAreaPanel = area_evaluate(LA_Tables,customMap);
  
  //空间交叉验证
  var areaSCVTitle = title('Spatial Predictive Performance');
  var areaSCV = area_scv(areaSCVTables, LA_columns,grids,serial,customMap);
  
  //将上述所有部件组合到一个面板
  var selectPanel = ui.Panel({
    widgets: [areaTitle, combination1, assessmentTitle, assessAreaPanel, areaSCVTitle, areaSCV],
    style: {position: 'top-right', backgroundColor :'a8dadc', width: '330px'}
  });
  //添加到地图
  customMap.add(selectPanel);
}

//=================================================================================================================
// 规模预测评价指标
var area_evaluate = function(LA_Tables,customMap){
  var select = ui.Select({
    items: Object.keys(LA_Tables),
    onChange:function panel(choice){
      // Get array of observation and prediction values 
      var obse = ee.Array(LA_Tables[choice].aggregate_array('ls_area'));
      var pred = ee.Array(LA_Tables[choice].aggregate_array('LA'));
      // Compute residuals
      var resi = obse.subtract(pred);
      // Compute RMSE and MAE
      var rmse = resi.pow(2).reduce('mean', [0]).sqrt().get([0]);
      var mae = resi.abs().reduce('mean', [0]).get([0]);
      // Compute correlation
      var correlation = LA_Tables[choice].reduceColumns({
          reducer: ee.Reducer.spearmansCorrelation(),
          selectors: ['ls_area','LA']
        }).get('correlation');
        
      var key = ee.List(['RMSE', 'MAE', 'Correlation']);
      var value = ee.Array([rmse, mae, correlation]);
      var chart = ui.Chart.array.values({array: value, axis:0, xLabels:key})
                  .setChartType('Table');
      var Panel = ui.Panel({style: {width: '250px', height:'200px', position: 'top-center', margin: '0% 0% 0% 43%'}});
      var hideButton = ui.Button({
          style:{position: 'bottom-center',stretch:'horizontal'},
          label: 'Close',
          onClick: function(){
            Panel.style().set({
              shown: false
            });
            return;
          }
        });
      var t = title('Fitting Performance', 'ffffff');
      Panel.add(t).add(chart).add(hideButton);
      customMap.add(Panel);
      },
      placeholder:'Area Map Prediction',
      style: {width: '200px'}
  });
  return select;
}

//=================================================================================================================
// 规模预测空间交叉验证评价指标
var area_scv = function(tables, LA_columns,grids,serial,customMap){
  var select = ui.Select({
    items: Object.keys(serial),
    onChange:function panel(choice){
    var areaTables = SCV.area_scv(tables, LA_columns, 'ls_area', 'id', grids, serial[choice])['scv'];
    var explain = SCV.area_scv(tables, LA_columns, 'ls_area', 'id', grids, serial[choice])['explain'];
    var importance = ee.Dictionary(explain.get('importance'));
    var ikeys = importance.keys();
    var ivalue = importance.values();
    var ichart = ui.Chart.array.values({array: ivalue, axis:0, xLabels:ikeys})
              .setChartType('PieChart')
              .setOptions({
                title: 'The Importance of Factors',
                legend: {position:'right'},
                is3D: true,
              });
    // Get array of observation and prediction values 
    var obse = ee.Array(areaTables.aggregate_array('ls_area'));
    var pred = ee.Array(areaTables.aggregate_array('LA'));
    // Compute residuals
    var resi = obse.subtract(pred);
    // Compute RMSE and MAE
    var rmse = resi.pow(2).reduce('mean', [0]).sqrt().get([0]);
    var mae = resi.abs().reduce('mean', [0]).get([0]);
    // Compute correlation
    var correlation = areaTables.reduceColumns({
          reducer: ee.Reducer.spearmansCorrelation(),
          selectors: ['ls_area','LA']
        }).get('correlation');
        
    var key = ee.List(['RMSE', 'MAE', 'Correlation']);
    var value = ee.Array([rmse, mae, correlation]);
    var chart = ui.Chart.array.values({array: value, axis:0, xLabels:key})
                  .setChartType('Table');
                  
    var Panel = ui.Panel({style: {width: '250px', height:'200px', position: 'top-center', margin: '0% 0% 0% 44%'}});
    var hideButton = ui.Button({
          style:{position: 'bottom-center',stretch:'horizontal'},
          label: 'Close',
          onClick: function(){
            Panel.style().set({
              shown: false
            });
            return;
          }
        });
        
    var t = title('Spatial Prediction Preformance', 'ffffff');
    Panel.add(t).add(chart).add(ichart).add(hideButton);
    customMap.add(Panel);
    },
    placeholder:'Zone of SCV',
    style: {width: '200px'}
  });
  return select;
}

//=================================================================================================================
// 滑坡危险性评价
exports.HazardSelector = function(Hazard_Images, customMap) {
  //危险性标题
  var hazardTitle = title('Landslid Hazard Modeling');
  //危险性选择框
  var hazardSelect = selector(Hazard_Images, customMap, 'Hazard Map Prediction', '200px');
  //隐藏最上层的危险性结果
  var closeHazard = hideTopLayerButton('Hazard',customMap);
  //并排危险性和隐藏按钮
  var combination =juxtaposition(hazardSelect, closeHazard);
  
  //将上述所有部件组合到一个面板
  var selectPanel = ui.Panel({
    widgets: [hazardTitle, combination],
    style: {position: 'top-right', backgroundColor :'a8dadc', width: '330px'}
  });
  //添加到地图
  customMap.add(selectPanel);  
}

//=================================================================================================================
// 规模(面积)、危险性图例
exports.LegendRight = function(areaParams, haParams, customMap){
  //图例面板
  var legend = ui.Panel({style:{width:'250px', position:'bottom-right'}});
  //滑坡规模(面积)图例
  var LA_title = title('Landslide Area', 'ffffff', '0% 20% 0% 20%');
  //生成渐变色条
  var lon = ee.Image.pixelLonLat().select('longitude');
  var gradient = lon.multiply(1/100.0);
  var legendImage = gradient.visualize(areaParams);
  var colorBar = ui.Thumbnail({
    image: legendImage,
    params: {bbox:'0,0,100,10', dimensions:'220x15'},
    style: {margin:'0 0 0 3%'}
  });
  //图例最小、最大值
  var txtPanel = ui.Panel({
    widgets: [ui.Label('0'), ui.Label({style: {stretch: 'horizontal'}}),ui.Label('419183(m²)')],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal', maxWidth:'235px',height:'25px'}
  });
  
  //滑坡危险性图例
  var Hazard_title = title('Landslide Hazard', 'ffffff', '3% 0% 0% 17%');
  //生成渐变色条
  var lon2 = ee.Image.pixelLonLat().select('longitude');
  var gradient2 = lon2.multiply(1/100.0);
  var legendImage2 = gradient2.visualize(haParams);
  var colorBar2 = ui.Thumbnail({
    image: legendImage2,
    params: {bbox:'0,0,100,10', dimensions:'220x15'},
    style: {margin:'0 0 0 3%'}
  });
  //图例最小、最大值
  var txtPanel2 = ui.Panel({
    widgets: [ui.Label('0'), ui.Label({style: {stretch: 'horizontal'}}),ui.Label('1')],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal', maxWidth:'235px',height:'25px'}
  });
  //合并到面板
  legend.add(LA_title).add(txtPanel).add(colorBar).add(Hazard_title).add(txtPanel2).add(colorBar2);
  customMap.add(legend);
}

//=================================================================================================================
// 动画加载
exports.animation = function(collection, prefix, yearList, propertyName, customMap){
  var visparam = {
    bands: ['vis-red','vis-green','vis-blue']
  };
  
  var col = collection.map(function(img){
    var idx = ee.Number.parse(img.get('system:index'))
    return img.set(propertyName, ee.String(prefix).cat(ee.String('_')).cat(pkgs.num_str(yearList.get(idx))));
  });
  
  animation.animate(col, 
  {
    vis:visparam,
    width: '500px',
    label: propertyName,
    timeStep: 300,
    preload: false, 
    // preloadCount: col.size(), 
    position: 'bottom-center',
    // compact: true,
    map: customMap
  })
}

//=================================================================================================================
// 去除最顶层图层函数
var hideTopLayerButton = function(prefix,customMap){
  
  var button = ui.Button({
    label:'Close Map',
    onClick: function(){
      var layers = customMap.layers();
      var top = layers.length()-1;
      var layer = layers.get(top);
      var layer_name = layer.getName();
      var name = layer_name.split(' ')[0];
      if(name == prefix){
        customMap.remove(layer);
        return;
      }
    }
  });
  return button;
}