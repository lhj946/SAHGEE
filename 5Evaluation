exports.ROC = function(field, layer, target){
  
  var ROC_field = field, ROC_min = 0, ROC_max = 1, ROC_steps = 50, ROC_points = layer; 
  var target_roc = ROC_points.filter(ee.Filter.eq(target,1));
  var non_target_roc = ROC_points.filter(ee.Filter.eq(target,0));
  // true-positive-rate, sensitivity 
  var ROC = ee.FeatureCollection(ee.List.sequence(ROC_min, ROC_max, null, ROC_steps).map(function (cutoff) {
      var TPR = ee.Number(target_roc.filter(ee.Filter.gte(ROC_field,cutoff)).size()).divide(target_roc.size());
      return ee.Feature(null,{cutoff: cutoff, TPR: TPR});
    }));  
  // true-negative-rate, specificity  
  var ROC1 = ee.FeatureCollection(ee.List.sequence(ROC_min, ROC_max, null, ROC_steps).map(function (cutoff) {
      var TNR = ee.Number(non_target_roc.filter(ee.Filter.lt(ROC_field,cutoff)).size()).divide(non_target_roc.size());
      return ee.Feature(null,{cutoff: cutoff, FPR:TNR.subtract(1).multiply(-1),TNR:TNR,
      });
  }));
  
  var merge = ROC.map(function(feat){
      var feature= ROC1.filter(ee.Filter.eq("cutoff", feat.get("cutoff"))).first();
      return ee.Feature(null,{TPR: ee.Number(feat.get('TPR')),
      FPR: ee.Number(feature.get('FPR')),
      TNR: ee.Number(feature.get('TNR')),
      cutoff: ee.Number(feature.get('cutoff')),
      dist:ee.Number(feat.get('TPR')).subtract(1).pow(2).add(ee.Number(feature.get('TNR')).subtract(1).pow(2)).sqrt()
      });
    });
  // Use trapezoidal approximation for area under curve (AUC)
  var X = ee.Array(merge.aggregate_array('FPR'));
  var Y = ee.Array(merge.aggregate_array('TPR')); 
  var Xk_m_Xkm1 = X.slice(0,1).subtract(X.slice(0,0,-1));
  var Yk_p_Ykm1 = Y.slice(0,1).add(Y.slice(0,0,-1));
  var AUC = Xk_m_Xkm1.multiply(Yk_p_Ykm1).multiply(0.5).reduce('sum',[0]).abs().toList().get(0);
  // Plot the ROC curve
  var chartROC=(ui.Chart.feature.byFeature(merge, 'FPR', 'TPR').setOptions({
        title: 'ROC curve',
        legend: 'none',
        // width: 200,
        // height: 400,
        hAxis: { title: 'False-positive-rate'},
        vAxis: { title: 'True-positive-rate'},
        lineWidth: 1}));
  // find the cutoff value whose ROC point is closest to (0,1) (= "perfect classification")      
  var ROC_best = ee.Number(merge.sort('dist').first().get('cutoff'));
  
  return {'ROC_best':ROC_best,'chartROC':chartROC,'AUC':AUC};
};

exports.Confusionmatrix = function(field, layer, target, ROC_best){
  var ROC_field = field;
  var ROC_points = layer;
  var cutoff = ROC_best;
  var target_roc = ROC_points.filter(ee.Filter.eq(target, 1));
  var TP = target_roc.filter(ee.Filter.gte(ROC_field, cutoff));
  TP = TP.map(function(ft){return ee.Feature(ft).set('tfpn', 'tp')})
  var FN = target_roc.filter(ee.Filter.lt(ROC_field, cutoff));
  FN = FN.map(function(ft){return ee.Feature(ft).set('tfpn', 'fn')})

  var non_target_roc = ROC_points.filter(ee.Filter.eq(target, 0));
  var TN = non_target_roc.filter(ee.Filter.lt(ROC_field, cutoff));
  TN = TN.map(function(ft){return ee.Feature(ft).set('tfpn', 'tn')})
  var FP = non_target_roc.filter(ee.Filter.gte(ROC_field, cutoff));
  FP = FP.map(function(ft){return ee.Feature(ft).set('tfpn', 'fp')})
  
  var matrix = ee.FeatureCollection([TP,FP,TN,FN]).flatten();
  var tp = matrix.filter(ee.Filter.eq('tfpn','tp'));
  tp = tp.aggregate_count('tfpn');
  var fn = matrix.filter(ee.Filter.eq('tfpn','fn'));
  fn = fn.aggregate_count('tfpn');
  var tn = matrix.filter(ee.Filter.eq('tfpn','tn'));
  tn = tn.aggregate_count('tfpn');
  var fp = matrix.filter(ee.Filter.eq('tfpn','fp'));
  fp = fp.aggregate_count('tfpn');
  return {'tp':tp, 'fn':fn, 'tn':tn, 'fp':fp, 'matrix':matrix};
}

exports.Indexs = function(Confusionmatrix){
  var tp = ee.Number(Confusionmatrix['tp']);
  var tn = ee.Number(Confusionmatrix['tn']);
  var fp = ee.Number(Confusionmatrix['fp']);
  var fn = ee.Number(Confusionmatrix['fn']);
  var accuracy = (tp.add(tn)).divide(tp.add(fn).add(tn).add(fp));
  var precision = tp.divide(tp.add(fp));
  var recall = tp.divide(tp.add(fn));
  var F1_score = precision.multiply(2).multiply(recall).divide(precision.add(recall));
  return {'accuracy':accuracy, 'precision':precision ,'recall':recall, 'F1_score':F1_score};
}
